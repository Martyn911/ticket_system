name: CI Checks (PHPStan & CS)

on:
    push:
        branches: [ "main" ] # Run on push to the main branch
    pull_request:
        branches: [ "main" ] # Run on creating/updating a Pull Request

jobs:
    php_quality:
        name: Code Quality Checks
        runs-on: ubuntu-latest

        steps:
            -   name: ‚¨áÔ∏è Checkout code
                uses: actions/checkout@v4

            -   name: üê≥ Set up Docker Compose
                # Start your services as described in docker-compose.yml
                run: docker compose up -d --build

            -   name: ‚è≥ Wait for services to be ready
                # Wait until the database and RabbitMQ are fully ready
                run: docker compose exec php-fpm sh -c "until nc -z database 5432; do echo Waiting for DB; sleep 1; done;"

            -   name: üì¶ Install Composer dependencies
                # Run Composer inside the Docker container
                run: docker compose exec php-fpm composer install --no-interaction --prefer-dist

            -   name: üíø Run Database Migrations
                # Create the DB schema for tests
                run: docker compose exec php-fpm php bin/console doctrine:migrations:migrate --no-interaction

            -   name: ‚ûï Create Test Database
                # Creates the database defined in DATABASE_URL with the '_test' suffix
                run: docker compose exec php-fpm php bin/console doctrine:database:create --env=test --if-not-exists

            -   name: üõ†Ô∏è Setup Test Database Schema
                # Apply the schema/migrations to the newly created test database
                run: docker compose exec php-fpm php bin/console doctrine:schema:update --force --env=test

            -   name: ‚öôÔ∏è Clear Symfony Cache
                # Clear the cache before analysis
                run: docker compose exec php-fpm php bin/console cache:clear

            -   name: üõ°Ô∏è Run PHPStan Static Analysis
                # Run PHPStan. Note the `--memory-limit` and the direct path!
                run: docker compose exec php-fpm ./vendor/bin/phpstan analyse src tests --level 9 --memory-limit=512M

            -   name: üé® Run PHP-CS-Fixer Check
                # Code style check (dry-run). If there are violations, the pipeline will fail.
                run: docker compose exec php-fpm ./vendor/bin/php-cs-fixer fix --dry-run --diff

            -   name: ‚úÖ Run PHPUnit Tests
                # Optional but recommended: run PHPUnit tests
                run: docker compose exec php-fpm php bin/phpunit
